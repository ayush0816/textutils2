{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","role","htmlFor","defaultProps","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","te","forEach","ele","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","components_Navbar","document","body","components_Alert","components_TextForm","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.153cc5fb.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <div>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n              </li>\r\n               \r\n            </ul>\r\n            <div className={`form-check form-switch mx-3 text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode === 'dark' ? 'lightMode' : 'darkMode'}</label>\r\n            </div>\r\n\r\n           { /*// <form className=\"d-flex\">\r\n            //   <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            //   <button className=\"btn btn-outline-success\" type=\"submit\" >Search</button>\r\n           // </form>*/}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n     \r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps ={\r\n    title: \" set tiltle here\",\r\n    aboutText:'about text here',\r\n}\r\nexport default Navbar\r\n","import React , {useState} from 'react'\r\n\r\nfunction TextForm(props) {\r\n\r\n    const handleOnChange =(event)=>{\r\n         setText(event.target.value)\r\n       \r\n    }\r\n    const hanleupclick=()=>{\r\n        let newText= text.toUpperCase()\r\n        setText(newText)\r\n        props.showAlert('Converted to uppercase','success')\r\n    }\r\n    const hanleloclick=()=>{\r\n      let newText= text.toLowerCase()\r\n      setText(newText)\r\n      props.showAlert('Converted to lowercase','success')\r\n  }\r\n  const hanleclick=()=>{\r\n    let newText= text.split(\" \")\r\n    let te='';\r\n    newText.forEach((ele)=>{\r\n      te+=ele[0]\r\n    })\r\n    setText(te)\r\n    props.showAlert('Converted to First letter','success')\r\n    \r\n}\r\n  \r\n    const [text,setText] = useState('')\r\n\r\n    return (\r\n      <>\r\n        <div className='container'>\r\n        <h1 style={{color: props.mode === 'dark' ? 'white' : 'black'}}>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark' ? 'lightgrey' : 'white', color: props.mode === 'dark' ? 'green':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button className={`btn btn-${props.mode === 'dark' ? 'warning' : 'danger'} mx-1`} onClick={hanleupclick}>Covert To Uppercase</button>\r\n      <button className={`btn btn-${props.mode === 'dark' ? 'warning' : 'danger'} mx-1`} onClick={hanleloclick}>Covert To Lowercase</button>\r\n      <button className={`btn btn-${props.mode === 'dark' ? 'warning' : 'danger'} mx-1`} onClick={hanleclick}>First Letter</button>\r\n        </div>\r\n        <div className='container my-3' style={{color: props.mode === 'dark' ? 'white' : 'black'}} >\r\n        <h2>Your Text Summary</h2>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : 'Write Something To Preview It Here'} </p>\r\n        </div>\r\n\r\n      </>\r\n    )\r\n}\r\n\r\nexport default TextForm\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-success alert-dismissible fade show`} role=\"alert\">\r\n        {capitalize(props.alert.type)} : {props.alert.msg}\r\n       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type,\n    })\n\n    setTimeout(()=>{\n      setAlert(null)\n    },1500)\n    \n  }\n  const toggleMode =()=>{\n    \n     if(mode === 'dark') {\n        setMode('light') \n        document.body.style.backgroundColor = 'white'\n        showAlert('Light Mode is enabled','success')\n     }\n     else{\n        setMode('dark')\n        document.body.style.backgroundColor = '#557A95'\n        showAlert('Dark Mode is enabled','success')\n     }\n  }\n  return (\n    <>\n     <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n     <TextForm heading=\"Enter the text below to analyze\" showAlert={showAlert} mode={mode} />\n    </div>\n\n    </>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render( \n    <React.StrictMode >\n    <App / >\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}